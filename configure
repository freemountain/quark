#!/bin/bash
set -e

PROJECT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

OS="$($PROJECT_PATH/tools/uname.sh -o)"
ARCH="$($PROJECT_PATH/tools/uname.sh -a)"

BIN_PATH="$PROJECT_PATH/tmp/bin-$OS-$ARCH"
BUILD_PATH="$PWD/build"

MAKE_CMD="make"
MK_INCLUDE_PATH=$PROJECT_PATH/tools
SEPERATOR="/"
if [[ "$OS" == "windows" ]]; then
  MAKE_CMD="mingw32-make.exe"
  SEPERATOR="\\\\"

  # posix to windows path conversion
  # http://stackoverflow.com/questions/13701218/windows-path-to-posix-path-conversion-in-bash
  tmp=$(echo $MK_INCLUDE_PATH | sed -e 's/^\///' -e 's/\//\\/g' -e 's/^./\0:/')
  
  # backslash to double backslash
  # http://stackoverflow.com/questions/2854655/command-to-escape-a-string-in-bash
  tmp=$(printf \"%q\" $tmp)

  # remove quotes
  # http://stackoverflow.com/questions/9733338/shell-script-remove-first-and-last-quote-from-a-variable
  tmp=${tmp%\"}
  MK_INCLUDE_PATH=${tmp#\"}
fi

print_vars() {
  echo "QT_PATH = ${QT_PATH}"
  echo "OS = ${OS}"
  echo "ARCH = ${ARCH}"
  echo "BUILD_PATH = ${BUILD_PATH}"
}

for i in "$@"
do
case $i in
    -q=*|--qt=*)
    QT_PATH="${i#*=}"
    shift # past argument=value
    ;;
    *)
    echo "Unknown option: $i";
    print_vars
    exit 1
    ;;
esac
done

if [ -z "$QT_PATH" ]; then
  if [[ "$OS" == "darwin" ]]; then
    QT_PATH="$HOME/Qt/5.7/clang_64"
    CORES="4"
  fi

  if [ ! -f "$QT_PATH/bin/qmake" ]; then
    echo "qt path is missing"
    exit 1
  fi
fi

if [[ "$OS" == "linux" ]]; then
  command -v autoreconf >/dev/null 2>&1 || { echo >&2 "autoreconf not found. Aborting."; exit 1; }
  command -v aclocal >/dev/null 2>&1 || { echo >&2 "aclocal not found. Aborting."; exit 1; }
  CORES="$(grep -c ^processor /proc/cpuinfo)"
fi

echo "Creating Directory at $BUILD_PATH"
mkdir -p $BUILD_PATH
echo "Creating Makefile"
echo "PROJECT_PATH:=$PROJECT_PATH" > Makefile
echo "QT:=$QT_PATH" >> Makefile
echo "ARCH:=$ARCH" >> Makefile
echo "OS:=$OS" >> Makefile
echo "BUILD_PATH:=$BUILD_PATH" >> Makefile
echo "CORES:=$CORES" >> Makefile
echo "MK_INCLUDE_PATH:=$MK_INCLUDE_PATH" >> Makefile
echo "SEPERATOR:=$SEPERATOR" >> Makefile

cat "$PROJECT_PATH/Makefile.default" >> Makefile

echo "Bootstrap environment"
$MAKE_CMD bootstrap -j$CORES

$QT_PATH/bin/qmake -o $BUILD_PATH/qmake.mk $PROJECT_PATH


echo "Configure Done"
